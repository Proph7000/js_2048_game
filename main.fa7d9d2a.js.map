{"version":3,"sources":["scripts/main.js"],"names":["gameField","document","querySelector","start","messageLose","messageWin","messageRestart","gameScore","gameBestScore","messageStart","messageWinner","arrayField","score","bestScore","gameOver","deepClone","array","JSON","parse","stringify","startGame","length","fill","innerText","classList","add","clearGameField","addNumbersIntoGameField","setGameField","randomizerCoords","field","possibleY","forEach","row","rowIndex","cellIndex","push","y","Math","floor","random","possibleX","number","i","x","randomizerNumber","cell","j","from","to","indexOfRow","indexOfCell","forCell","rows","cells","className","isMoveRowsRight","map","includes","isMoveRowsLeft","clone","reverse","isMoveColumnsUp","convertColumnToRow","isMoveColumnsDown","isGameOver","original","compare","winner","remove","isSame","end","every","item","coords1","undefined","moveRight","lastFullCell","isMultiplied","moveLeft","moveUp","moveDown","addEventListener","window","e","code","restart","Promise","resolve","then"],"mappings":"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","file":"main.fa7d9d2a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameField = document.querySelector('.game-field');\nconst start = document.querySelector('.start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageRestart = document.querySelector('.message-restart');\nconst gameScore = document.querySelector('.game-score');\nconst gameBestScore = document.querySelector('.game-score--best');\nconst messageStart = document.querySelector('.message-start');\nconst messageWinner = document.querySelector('.message-winner');\n\nconst arrayField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet score = 0;\nlet bestScore = 0;\nlet gameOver = [];\n\ngameOver.length = arrayField.length;\ngameOver.fill([]);\n\naddNumbersIntoGameField(arrayField, gameOver);\naddNumbersIntoGameField(arrayField, gameOver);\nsetGameField(arrayField, gameField);\n\nstart.addEventListener('click', () => {\n  startGame();\n});\n\nwindow.addEventListener('keydown', (e) => {\n  if (e.code === 'ArrowRight' && isMoveRowsRight(arrayField)) {\n    arrayField.forEach(row => {\n      moveRight(row);\n    });\n\n    addNumbersIntoGameField(arrayField, gameOver);\n  }\n\n  if (e.code === 'ArrowLeft' && isMoveRowsLeft(arrayField)) {\n    arrayField.forEach(row => {\n      moveLeft(row);\n    });\n\n    addNumbersIntoGameField(arrayField, gameOver);\n  }\n\n  if (e.code === 'ArrowUp' && isMoveColumnsUp(arrayField)) {\n    moveUp(arrayField);\n    addNumbersIntoGameField(arrayField, gameOver);\n  }\n\n  if (e.code === 'ArrowDown' && isMoveColumnsDown(arrayField)) {\n    moveDown(arrayField);\n    addNumbersIntoGameField(arrayField, gameOver);\n  }\n\n  setGameField(arrayField, gameField);\n  isGameOver(arrayField, gameOver);\n  gameOver = deepClone(arrayField);\n});\n\nfunction deepClone(array) {\n  return JSON.parse(JSON.stringify(array));\n}\n\nfunction startGame() {\n  gameOver = [];\n  gameOver.length = arrayField.length;\n  gameOver.fill([]);\n  score = 0;\n  gameScore.innerText = 0;\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageRestart.classList.add('hidden');\n  messageWinner.classList.add('hidden');\n\n  clearGameField(arrayField);\n  addNumbersIntoGameField(arrayField, gameOver);\n  addNumbersIntoGameField(arrayField, gameOver);\n  setGameField(arrayField, gameField);\n}\n\nfunction randomizerCoords(field) {\n  const possibleY = [];\n\n  field.forEach((row, rowIndex) => {\n    for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n      if (row[cellIndex] === 0) {\n        possibleY.push(rowIndex);\n        cellIndex = row.length;\n      }\n    }\n  });\n\n  if (possibleY.length === 0) {\n    return;\n  }\n\n  const y = possibleY[Math.floor(Math.random() * possibleY.length)];\n  const possibleX = [];\n\n  field[y].forEach((number, i) => {\n    if (!number) {\n      possibleX.push(i);\n    }\n  });\n\n  const x = possibleX[Math.floor(Math.random() * possibleX.length)];\n\n  return {\n    x,\n    y,\n  };\n}\n\nfunction randomizerNumber() {\n  return (Math.floor(Math.random() * 10) <= 8) ? 2 : 4;\n}\n\nfunction clearGameField(field) {\n  field.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      field[i][j] = 0;\n    });\n  });\n}\n\nfunction setGameField(from, to) {\n  from.forEach((row, indexOfRow) => {\n    row.forEach((cell, indexOfCell) => {\n      let forCell = cell;\n\n      if (!forCell) {\n        forCell = '';\n      }\n\n      to.rows[indexOfRow].cells[indexOfCell].className = '';\n      to.rows[indexOfRow].cells[indexOfCell].classList.add('field-cell');\n\n      to.rows[indexOfRow].cells[indexOfCell].classList\n        .add(`field-cell--${forCell}`);\n\n      to.rows[indexOfRow].cells[indexOfCell].innerText = forCell;\n    });\n  });\n}\n\nfunction isMoveRowsRight(array) {\n  return array\n    .map(row => {\n      for (let i = 0; i < row.length; i++) {\n        if ((row[i + 1] === 0 || row[i] === row[i + 1]) && row[i] !== 0) {\n          i = row.length;\n\n          return true;\n        }\n      };\n\n      return false;\n    })\n    .includes(true);\n}\n\nfunction isMoveRowsLeft(array) {\n  const clone = deepClone(array);\n\n  clone.forEach(row => row.reverse());\n\n  return isMoveRowsRight(clone);\n}\n\nfunction isMoveColumnsUp(array) {\n  const clone = deepClone(array);\n\n  convertColumnToRow(clone);\n\n  return isMoveRowsLeft(clone);\n}\n\nfunction isMoveColumnsDown(array) {\n  const clone = deepClone(array);\n\n  convertColumnToRow(clone);\n\n  return isMoveRowsRight(clone);\n}\n\nfunction convertColumnToRow(array) {\n  const clone = deepClone(array);\n\n  array.length = 0;\n\n  for (let j = 0; j < clone.length; j++) {\n    array.push([]);\n\n    for (let i = 0; i < clone[j].length; i++) {\n      array[j].push(clone[i][j]);\n    }\n  }\n}\n\nfunction isGameOver(original, clone) {\n  const compare = [];\n  let winner = false;\n\n  for (let i = 0; i < original.length; i++) {\n    for (let j = 0; j < original.length; j++) {\n      if (original[i][j] === 2048) {\n        messageWin.classList.remove('hidden');\n        winner = true;\n      }\n\n      let isSame = false;\n\n      if (original[i][j] === clone[i][j]) {\n        isSame = true;\n      }\n\n      if (\n        ((j < original.length - 1) && (original[i][j] === original[i][j + 1]))\n        || (\n          (i < original.length - 1)\n          && (original[i][j] === original[i + 1][j])\n        )\n      ) {\n        isSame = false;\n      }\n\n      compare.push(isSame);\n    }\n  }\n\n  const end = compare.every(item => item === true);\n\n  if (end && winner) {\n    messageWinner.classList.remove('hidden');\n    messageRestart.classList.remove('hidden');\n\n    return true;\n  }\n\n  if (end) {\n    messageLose.classList.remove('hidden');\n    messageRestart.classList.remove('hidden');\n\n    return true;\n  }\n}\n\nfunction addNumbersIntoGameField(field, clone) {\n  if (isGameOver(field, clone)) {\n    return;\n  }\n\n  const coords1 = randomizerCoords(field);\n\n  if (coords1 === undefined) {\n    return;\n  }\n\n  field[coords1.y][coords1.x] = randomizerNumber();\n}\n\nfunction moveRight(row) {\n  let lastFullCell = null;\n  let isMultiplied = false;\n\n  for (let i = row.length - 1; i >= 0; i--) {\n    if (row[i] === row[lastFullCell] && !isMultiplied) {\n      row[lastFullCell] *= 2;\n      score += row[lastFullCell];\n      gameScore.innerText = score;\n      isMultiplied = true;\n\n      if (score > bestScore) {\n        bestScore = score;\n        gameBestScore.innerText = bestScore;\n      }\n\n      row[i] = 0;\n    }\n\n    if (row[i] && lastFullCell && !row[lastFullCell - 1]) {\n      row[lastFullCell - 1] = row[i];\n      isMultiplied = false;\n      row[i] = 0;\n      lastFullCell--;\n    }\n\n    if (!lastFullCell && row[i] && (i !== row.length - 1)) {\n      row[row.length - 1] = row[i];\n      lastFullCell = row.length - 1;\n      row[i] = 0;\n    }\n\n    if (row[i]) {\n      lastFullCell = i;\n    }\n  }\n\n  return row;\n}\n\nfunction moveLeft(row) {\n  return moveRight(row.reverse()).reverse();\n}\n\nfunction moveUp(array) {\n  convertColumnToRow(array);\n\n  array.forEach(row => moveLeft(row));\n\n  convertColumnToRow(array);\n}\n\nfunction moveDown(array) {\n  convertColumnToRow(array);\n\n  array.forEach(row => moveRight(row));\n\n  convertColumnToRow(array);\n}\n\nconst restart = new Promise((resolve) => {\n  window.addEventListener('keydown', (e) => {\n    if (\n      e.code === 'ArrowRight'\n      || e.code === 'ArrowLeft'\n      || e.code === 'ArrowUp'\n      || e.code === 'ArrowDown'\n    ) {\n      resolve();\n    }\n  });\n});\n\nrestart\n  .then(() => {\n    messageStart.classList.add('hidden');\n    start.classList.remove('start');\n    start.classList.add('restart');\n    start.innerText = 'Restart';\n  });\n"]}